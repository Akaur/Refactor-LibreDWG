/*****************************************************************************/
/*  LibreDWG - free implementation of the DWG file format                    */
/*                                                                           */
/*  Copyright (C) 2009 Free Software Foundation, Inc.                        */
/*                                                                           */
/*  This library is free software, licensed under the terms of the GNU       */
/*  General Public License as published by the Free Software Foundation,     */
/*  either version 3 of the License, or (at your option) any later version.  */
/*  You should have received a copy of the GNU General Public License        */
/*  along with this program.  If not, see <http://www.gnu.org/licenses/>.    */
/*****************************************************************************/

/*
 * section_locate.c: locating section functions
 * written by Felipe Castro
 * modified by Felipe CorrÃªa da Silva Sances
 * modified by Rodrigo Rodrigues da Silva
 * modified by Till Heuschmann
 */

#include "section_locate.h"
#include "decode_r2004.h"
#include "logging.h"

extern unsigned int
bit_ckr8(unsigned int dx, unsigned char *adr, long n);

/* Read R13-R15 Object Map
 */
void
read_R13_R15_section_locate(Bit_Chain *dat, Dwg_Data *dwg)
{
  unsigned int ckr, ckr2;
  int i;

  dwg->header.num_sections = bit_read_RL(dat);

  //  why do we have this limit to only 6 sections?
  //  It seems to be a bug, so I'll comment it out and will add dynamic
  //  allocation of the sections vector.
  //  OpenDWG spec speaks of 6 possible values for the record number
  //  Maybe the original libdwg author got confused about that.
  /*
   if (dwg->header.num_sections > 6)
   dwg->header.num_sections = 6;
   */

  dwg->header.section = (Dwg_Section*) malloc(sizeof (Dwg_Section)
                         * dwg->header.num_sections);

  for (i = 0; i < dwg->header.num_sections; i++)
    {
      dwg->header.section[i].number = bit_read_RC(dat);
      dwg->header.section[i].address = bit_read_RL(dat);
      dwg->header.section[i].size = bit_read_RL(dat);
    }

  // Check CRC-on
  ckr = bit_ckr8(0xc0c1, dat->chain, dat->byte);
  ckr2 = bit_read_RS(dat);
  if (ckr != ckr2)
    {
      printf("header crc todo ckr:%x ckr2:%x\n", ckr, ckr2);
      return 1;
    }

  if (bit_search_sentinel(dat, dwg_sentinel(DWG_SENTINEL_HEADER_END)))
    LOG_TRACE("\n HEADER (end): %8X\n", (unsigned int) dat->byte)
}

/* Read R2004 Section Map
 * The Section Map is a vector of number, size, and address triples used
 * to locate the sections in the file.
 */
static void
read_R2004_section_map(Bit_Chain *dat, Dwg_Data *dwg,
                       unsigned long int comp_data_size,
                       unsigned long int decomp_data_size)
{
  char *decomp, *ptr;
  int section_address;
  int bytes_remaining;
  int i;

  dwg->header.num_sections = 0;
  dwg->header.section = 0;

  // allocate memory to hold decompressed data
  decomp = (char *) malloc(decomp_data_size * sizeof (char));

  if (decomp == 0)
    return;                // No memory

  decompress_R2004_section(dat, decomp, comp_data_size);
  LOG_TRACE("\n 2004 Section Map fields \n")

  section_address = 0x100;  // starting address
  i = 0;
  bytes_remaining = decomp_data_size;
  ptr = decomp;
  dwg->header.num_sections = 0;

  while(bytes_remaining)
  {
    if (dwg->header.num_sections == 0)
      dwg->header.section = (Dwg_Section*) malloc(sizeof (Dwg_Section));
    else
      dwg->header.section = (Dwg_Section*) realloc(dwg->header.section,
                             sizeof (Dwg_Section) 
                             * (dwg->header.num_sections+1));

    dwg->header.section[i].number = *((int*) ptr);
    dwg->header.section[i].size = *((int*) ptr + 1);
    dwg->header.section[i].address = section_address;
    section_address += dwg->header.section[i].size;
    bytes_remaining -= 8;
    ptr += 8;

    LOG_TRACE("SectionNumber: %d\n", dwg->header.section[i].number)
    LOG_TRACE("SectionSize: %x\n", dwg->header.section[i].size)
    LOG_TRACE("SectionAddr: %x\n", dwg->header.section[i].address)

    if (dwg->header.section[i].number < 0)
      {
        dwg->header.section[i].parent = *((int*) ptr);
        dwg->header.section[i].left = *((int*) ptr + 1);
        dwg->header.section[i].right = *((int*) ptr + 2);
        dwg->header.section[i].x00 = *((int*) ptr + 3);
        bytes_remaining -= 16;
        ptr += 16;

        LOG_TRACE("Parent: %d\n", (int)dwg->header.section[i].parent)
        LOG_TRACE("Left: %d\n", (int)dwg->header.section[i].left)
        LOG_TRACE("Right: %d\n", (int)dwg->header.section[i].right)
        LOG_TRACE("0x00: %d\n", (int)dwg->header.section[i].x00)
      }

    dwg->header.num_sections++;
    i++;
  }
  free(decomp);
}

